}
# Removing first row due to readtext method
polarity_review <- polarity_review[-1,]
# Reading all of the negative reviews from multiple files
path <- "review_polarity/neg/"
file.names <- dir(path, pattern =".txt")
for(i in 1:length(file.names)){
file <- readtext(paste0(path, file.names[i]))
file$sentiment <- 0
polarity_review <- rbind(polarity_review, file)
}
row.names(polarity_review) <- NULL
path <- "review_polarity/pos/"
polarity_review <- ""
file.names <- dir(path, pattern =".txt")
for(i in 1:length(file.names)){
file <- readtext(paste0(path, file.names[i]))
file$sentiment <- as.numeric(1)
polarity_review <- rbind(polarity_review, file)
}
# Removing first row due to readtext method
polarity_review <- polarity_review[-1,]
# Reading all of the negative reviews from multiple files
path <- "review_polarity/neg/"
file.names <- dir(path, pattern =".txt")
for(i in 1:length(file.names)){
file <- readtext(paste0(path, file.names[i]))
file$sentiment <- as.numeric(0)
polarity_review <- rbind(polarity_review, file)
}
row.names(polarity_review) <- NULL
path <- "review_polarity/pos/"
polarity_review <- ""
file.names <- dir(path, pattern =".txt")
for(i in 1:length(file.names)){
file <- readtext(paste0(path, file.names[i]))
file$sentiment <- as.integer(1)
polarity_review <- rbind(polarity_review, file)
}
# Removing first row due to readtext method
polarity_review <- polarity_review[-1,]
# Reading all of the negative reviews from multiple files
path <- "review_polarity/neg/"
file.names <- dir(path, pattern =".txt")
for(i in 1:length(file.names)){
file <- readtext(paste0(path, file.names[i]))
file$sentiment <- as.integer(0)
polarity_review <- rbind(polarity_review, file)
}
row.names(polarity_review) <- NULL
polarity_review <- data.frame(id = as.character(), review = as.character(), sentiment = as.integer())
polarity_review$sentiment <- as.integer(polarity_review$sentiment)
path <- "review_polarity/pos/"
polarity_review <- ""
file.names <- dir(path, pattern =".txt")
for(i in 1:length(file.names)){
file <- readtext(paste0(path, file.names[i]))
file$sentiment <- 1
polarity_review <- rbind(polarity_review, file)
}
# Removing first row due to readtext method
polarity_review <- polarity_review[-1,]
# Reading all of the negative reviews from multiple files
path <- "review_polarity/neg/"
file.names <- dir(path, pattern =".txt")
for(i in 1:length(file.names)){
file <- readtext(paste0(path, file.names[i]))
file$sentiment <- 0
polarity_review <- rbind(polarity_review, file)
}
polarity_review$sentiment <- as.integer(polarity_review$sentiment)
row.names(polarity_review) <- NULL
# Change order and names of columns to the same as imbd_review
polarity_review <- polarity_review[, c(1,3,2)]
colnames(polarity_review) <- colnames(imbd_review)
# Shuffle all the polarity_reviews
data <- polarity_review[sample(nrow(polarity_review)),]
train <- imbd_review[1:1000,]
train <- rbind(train, data[1:size,])
View(train)
View(data)
train <- imbd_review[1:1000, c(2,3)]
train <- rbind(train, data[1:size, c(2,3)])
train <- imbd_review[1:1000, c(2,3)]
nrow(data[1:size, c(2,3)])
nrow(data[, c(2,3)])
size = 1000
train <- imbd_review[1:size, c(2,3)]
train <- rbind(train, data[1:size, c(2,3)])
rm(test)
rm(unlabeled)
rm(file, i, file.names, path, data, file.names)
tokens <- tokenize(train[,2])
corpus <- corpus_freq(tokens, corpus_size=3000)
my_features <- get_feature_vectors(tokens, corpus = corpus)
my_features <- add_targets(my_features, train)
my_features$sentiment <- as.factor(my_features$sentiment)
#Formula for each model
form <- as.formula(paste("sentiment~", paste(setdiff(names(my_features), c("sentiment")), collapse="+")))
m_svm <- svm(form, data=my_features, type="C")
# Prepare the first dataset
tokens_imdb <- tokenize(imbd_review[1:1000,])
corpus_imdb <- corpus_freq(tokens_imdb, corpus_size=3000)
my_features_imdb <- get_feature_vectors(tokens_imdb, corpus = corpus_imdb)
my_features_imdb <- add_targets(my_features_imdb, imbd_review[1:1000,])
my_features_imdb$sentiment <- as.factor(my_features_imdb$sentiment)
# Predict the sentiment of the reviews from first dataset
pred_svm <- predict(m_svm, my_features_imdb)
table(my_features_imdb$sentiment, pred_svm)
sensitivity(table(my_features_imdb$sentiment, pred_svm))
tokens_imdb <- tokenize(imbd_review[1:1000,])
my_features_imdb <- get_feature_vectors(tokens_imdb, corpus = corpus)
my_features_imdb <- add_targets(my_features_imdb, imbd_review[1:1000,])
my_features_imdb$sentiment <- as.factor(my_features_imdb$sentiment)
# Predict the sentiment of the reviews from first dataset
pred_svm <- predict(m_svm, my_features_imdb)
table(my_features_imdb$sentiment, pred_svm)
sensitivity(table(my_features_imdb$sentiment, pred_svm))
tokens_imdb <- tokenize(imbd_review[1:1000, 3])
my_features_imdb <- get_feature_vectors(tokens_imdb, corpus = corpus)
my_features_imdb <- add_targets(my_features_imdb, imbd_review[1:1000,])
my_features_imdb$sentiment <- as.factor(my_features_imdb$sentiment)
# Predict the sentiment of the reviews from first dataset
pred_svm <- predict(m_svm, my_features_imdb)
table(my_features_imdb$sentiment, pred_svm)
sensitivity(table(my_features_imdb$sentiment, pred_svm))
pred_svm <- predict(m_svm, my_features_polarity)
table(my_features_polarity$sentiment, pred_svm)
sensitivity(table(my_features_polarity$sentiment, pred_svm))
tokens_polarity <- tokenize(polarity_review[,2])
my_features_polarity <- get_feature_vectors(tokens_polarity, corpus = corpus)
my_features_polarity <- add_targets(my_features_polarity, polarity_review[,])
my_features_polarity$sentiment <- as.factor(my_features_polarity$sentiment)
pred_svm <- predict(m_svm, my_features_polarity)
table(my_features_polarity$sentiment, pred_svm)
sensitivity(table(my_features_polarity$sentiment, pred_svm))
tokens_polarity <- tokenize(polarity_review[,3])
my_features_polarity <- get_feature_vectors(tokens_polarity, corpus = corpus)
my_features_polarity <- add_targets(my_features_polarity, polarity_review[,])
my_features_polarity$sentiment <- as.factor(my_features_polarity$sentiment)
pred_svm <- predict(m_svm, my_features_polarity)
table(my_features_polarity$sentiment, pred_svm)
sensitivity(table(my_features_polarity$sentiment, pred_svm))
size = 1000
# First data set
# Read tsv files
imbd_review <- read.delim("data/labeledTrainData.tsv", sep = "\t", stringsAsFactors = FALSE)
# Fill the train dataset with 1000 observations from imdb dataset
train <- imbd_review[1:size, c(2,3)]
#Second dataset
# Reading all of the positive reviews from multiple files
path <- "review_polarity/pos/"
polarity_review <- ""
file.names <- dir(path, pattern =".txt")
for(i in 1:length(file.names)){
file <- readtext(paste0(path, file.names[i]))
file$sentiment <- 1
polarity_review <- rbind(polarity_review, file)
}
# Removing first row due to readtext method
polarity_review <- polarity_review[-1,]
# Reading all of the negative reviews from multiple files
path <- "review_polarity/neg/"
file.names <- dir(path, pattern =".txt")
for(i in 1:length(file.names)){
file <- readtext(paste0(path, file.names[i]))
file$sentiment <- 0
polarity_review <- rbind(polarity_review, file)
}
polarity_review$sentiment <- as.integer(polarity_review$sentiment)
row.names(polarity_review) <- NULL
# Change order and names of columns to the same as imbd_review
polarity_review <- polarity_review[, c(1,3,2)]
colnames(polarity_review) <- colnames(imbd_review)
# Shuffle all the polarity_reviews
polarity_review <- polarity_review[sample(nrow(polarity_review)),]
train <- rbind(train, data[1:size, c(2,3)])
# Own data set
own_review <- read.delim("own_reviews.txt", sep = "\t", stringsAsFactors = FALSE)
# Remove unneeded variables
rm(file, i, file.names, path, data, file.names, size)
train <- rbind(train, data[1:size, c(2,3)])
size = 1000
train <- rbind(train, data[1:size, c(2,3)])
train <- rbind(train, polarity_review[1:size, c(2,3)])
rm(file, i, file.names, path, data, file.names, size)
tokens_own_review <- tokenize(own_review[,3])
my_features_own_review <- get_feature_vectors(tokens_own_review, corpus = corpus)
my_features_own_review <- add_targets(my_features_own_review, own_review[,])
my_features_own_review$sentiment <- as.factor(my_features_own_review$sentiment)
pred_svm <- predict(m_svm, my_features_own_review)
pred_svm
own_review$sentiment
table(my_features_own_review$sentiment, pred_svm)
sensitivity(table(my_features_own_review$sentiment, pred_svm))
source("import.R")
source("dataMiningFunctions.R")
# Train model with first dataset from kaggle
#take out all the words from the train reviews
tokens <- tokenize(train[,2])
corpus <- corpus_freq(tokens, corpus_size=3000)
my_features <- get_feature_vectors(tokens, corpus = corpus)
my_features <- add_targets(my_features, train)
my_features$sentiment <- as.factor(my_features$sentiment)
#Formula for each model
form <- as.formula(paste("sentiment~", paste(setdiff(names(my_features), c("sentiment")), collapse="+")))
m_svm <- svm(form, data=my_features, type="C")
# Prepare the first dataset
tokens_imdb <- tokenize(imbd_review[1000:2000, 3])
my_features_imdb <- get_feature_vectors(tokens_imdb, corpus = corpus)
my_features_imdb <- add_targets(my_features_imdb, imbd_review[1:1000,])
my_features_imdb$sentiment <- as.factor(my_features_imdb$sentiment)
# Predict the sentiment of the reviews from first dataset
pred_svm <- predict(m_svm, my_features_imdb)
table(my_features_imdb$sentiment, pred_svm)
sensitivity(table(my_features_imdb$sentiment, pred_svm))
# Setup and predict second dataset
tokens_polarity <- tokenize(polarity_review[1000:2000,3])
my_features_polarity <- get_feature_vectors(tokens_polarity, corpus = corpus)
my_features_polarity <- add_targets(my_features_polarity, polarity_review[,])
my_features_polarity$sentiment <- as.factor(my_features_polarity$sentiment)
pred_svm <- predict(m_svm, my_features_polarity)
table(my_features_polarity$sentiment, pred_svm)
sensitivity(table(my_features_polarity$sentiment, pred_svm))
# Setup and predict own dataset
tokens_own_review <- tokenize(own_review[,3])
my_features_own_review <- get_feature_vectors(tokens_own_review, corpus = corpus)
my_features_own_review <- add_targets(my_features_own_review, own_review[,])
my_features_own_review$sentiment <- as.factor(my_features_own_review$sentiment)
pred_svm <- predict(m_svm, my_features_own_review)
pred_svm
own_review$sentiment
table(my_features_own_review$sentiment, pred_svm)
sensitivity(table(my_features_own_review$sentiment, pred_svm))
my_features_polarity <- add_targets(my_features_polarity, polarity_review[1000:2000,])
my_features_polarity$sentiment <- as.factor(my_features_polarity$sentiment)
pred_svm <- predict(m_svm, my_features_polarity)
table(my_features_polarity$sentiment, pred_svm)
sensitivity(table(my_features_polarity$sentiment, pred_svm))
size = 2000
# First data set
# Read tsv files
imbd_review <- read.delim("data/labeledTrainData.tsv", sep = "\t", stringsAsFactors = FALSE)
# Fill the train dataset with 1000 observations from imdb dataset
train <- imbd_review[1:size, c(2,3)]
#Second dataset
# Reading all of the positive reviews from multiple files
path <- "review_polarity/pos/"
polarity_review <- ""
file.names <- dir(path, pattern =".txt")
for(i in 1:length(file.names)){
file <- readtext(paste0(path, file.names[i]))
file$sentiment <- 1
polarity_review <- rbind(polarity_review, file)
}
# Removing first row due to readtext method
polarity_review <- polarity_review[-1,]
# Reading all of the negative reviews from multiple files
path <- "review_polarity/neg/"
file.names <- dir(path, pattern =".txt")
for(i in 1:length(file.names)){
file <- readtext(paste0(path, file.names[i]))
file$sentiment <- 0
polarity_review <- rbind(polarity_review, file)
}
polarity_review$sentiment <- as.integer(polarity_review$sentiment)
row.names(polarity_review) <- NULL
# Change order and names of columns to the same as imbd_review
polarity_review <- polarity_review[, c(1,3,2)]
colnames(polarity_review) <- colnames(imbd_review)
# Shuffle all the polarity_reviews
polarity_review <- polarity_review[sample(nrow(polarity_review)),]
train <- rbind(train, polarity_review[1:size, c(2,3)])
# Own data set
own_review <- read.delim("own_reviews.txt", sep = "\t", stringsAsFactors = FALSE)
# Remove unneeded variables
rm(file, i, file.names, path, file.names, size)
tokens <- tokenize(train[,2])
corpus <- corpus_freq(tokens, corpus_size=4000)
my_features <- get_feature_vectors(tokens, corpus = corpus)
my_features <- add_targets(my_features, train)
my_features$sentiment <- as.factor(my_features$sentiment)
#Formula for each model
form <- as.formula(paste("sentiment~", paste(setdiff(names(my_features), c("sentiment")), collapse="+")))
m_svm <- svm(form, data=my_features, type="C")
# Prepare the first dataset
tokens_imdb <- tokenize(imbd_review[1000:2000, 3])
my_features_imdb <- get_feature_vectors(tokens_imdb, corpus = corpus)
my_features_imdb <- add_targets(my_features_imdb, imbd_review[1:1000,])
my_features_imdb$sentiment <- as.factor(my_features_imdb$sentiment)
source("functions.R")
source("preparation.R")
# Train model with first dataset from kaggle
#take out all the words from the train reviews
corpus <- corpus_freq(tokens, corpus_size=4000)
my_features <- get_feature_vectors(tokens, corpus = corpus)
my_features <- add_targets(my_features, train)
my_features$sentiment <- as.factor(my_features$sentiment)
#Formula for each model
form <- as.formula(paste("sentiment~", paste(setdiff(names(my_features), c("sentiment")), collapse="+")))
m_svm <- svm(form, data=my_features, type="C")
# Prepare the first dataset
my_features_imdb <- get_feature_vectors(tokens_imdb, corpus = corpus)
my_features_imdb <- add_targets(my_features_imdb, imbd_review[1:1000,])
my_features_imdb$sentiment <- as.factor(my_features_imdb$sentiment)
# Predict the sentiment of the reviews from first dataset
pred_svm <- predict(m_svm, my_features_imdb)
table(my_features_imdb$sentiment, pred_svm)
sensitivity(table(my_features_imdb$sentiment, pred_svm))
# Setup and predict second dataset
my_features_polarity <- get_feature_vectors(tokens_polarity, corpus = corpus)
my_features_polarity <- add_targets(my_features_polarity, polarity_review[1000:2000,])
my_features_polarity$sentiment <- as.factor(my_features_polarity$sentiment)
pred_svm <- predict(m_svm, my_features_polarity)
table(my_features_polarity$sentiment, pred_svm)
sensitivity(table(my_features_polarity$sentiment, pred_svm))
# Setup and predict own dataset
my_features_own_review <- get_feature_vectors(tokens_own_review, corpus = corpus)
my_features_own_review <- add_targets(my_features_own_review, own_review[,])
my_features_own_review$sentiment <- as.factor(my_features_own_review$sentiment)
pred_svm <- predict(m_svm, my_features_own_review)
pred_svm
own_review$sentiment
table(my_features_own_review$sentiment, pred_svm)
sensitivity(table(my_features_own_review$sentiment, pred_svm))
View(own_review)
my_features_imdb <- get_feature_vectors(tokens_imdb, corpus = corpus)
my_features_imdb <- add_targets(my_features_imdb, imbd_review[1:1000,])
my_features_imdb$sentiment <- as.factor(my_features_imdb$sentiment)
# Predict the sentiment of the reviews from first dataset
pred_svm <- predict(m_svm, my_features_imdb)
table(my_features_imdb$sentiment, pred_svm)
sensitivity(table(my_features_imdb$sentiment, pred_svm))
my_features_polarity <- get_feature_vectors(tokens_polarity, corpus = corpus)
my_features_polarity <- add_targets(my_features_polarity, polarity_review[1000:2000,])
my_features_polarity$sentiment <- as.factor(my_features_polarity$sentiment)
pred_svm <- predict(m_svm, my_features_polarity)
table(my_features_polarity$sentiment, pred_svm)
sensitivity(table(my_features_polarity$sentiment, pred_svm))
my_features_polarity <- add_targets(my_features_polarity, polarity_review[1000:2000,])
my_features_polarity$sentiment <- as.factor(my_features_polarity$sentiment)
pred_svm <- predict(m_svm, my_features_polarity)
table(my_features_polarity$sentiment, pred_svm)
sensitivity(table(my_features_polarity$sentiment, pred_svm))
corpus <- corpus_freq(tokens, corpus_size=4000)
my_features <- get_feature_vectors(tokens, corpus = corpus)
my_features <- add_targets(my_features, train)
my_features$sentiment <- as.factor(my_features$sentiment)
#Formula for each model
form <- as.formula(paste("sentiment~", paste(setdiff(names(my_features), c("sentiment")), collapse="+")))
m_svm <- svm(form, data=my_features, type="C")
pred_svm <- predict(m_svm, my_features_imdb)
table(my_features_imdb$sentiment, pred_svm)
sensitivity(table(my_features_imdb$sentiment, pred_svm))
my_features_imdb <- add_targets(my_features_imdb, imbd_review[1000:2000,])
my_features_imdb$sentiment <- as.factor(my_features_imdb$sentiment)
# Predict the sentiment of the reviews from first dataset
pred_svm <- predict(m_svm, my_features_imdb)
table(my_features_imdb$sentiment, pred_svm)
sensitivity(table(my_features_imdb$sentiment, pred_svm))
size = 1000
train <- imbd_review[1:size, c(2,3)]
train <- rbind(train, polarity_review[1:size, c(2,3)])
corpus <- corpus_freq(tokens, corpus_size=4000)
my_features <- get_feature_vectors(tokens, corpus = corpus)
my_features <- add_targets(my_features, train)
my_features$sentiment <- as.factor(my_features$sentiment)
# Formula for each model
form <- as.formula(paste("sentiment~", paste(setdiff(names(my_features), c("sentiment")), collapse="+")))
# train the support vector machine with the train data
m_svm <- svm(form, data=my_features, type="C")
View(my_features)
pred_svm <- predict(m_svm, my_features_imdb)
table(my_features_imdb$sentiment, pred_svm)
sensitivity(table(my_features_imdb$sentiment, pred_svm))
my_features_imdb <- add_targets(my_features_imdb, imbd_review[1000:2000,])
my_features_imdb$sentiment <- as.factor(my_features_imdb$sentiment)
pred_svm <- predict(m_svm, my_features_imdb)
table(my_features_imdb$sentiment, pred_svm)
sensitivity(table(my_features_imdb$sentiment, pred_svm))
pred_svm <- predict(m_svm, my_features_polarity)
table(my_features_polarity$sentiment, pred_svm)
sensitivity(table(my_features_polarity$sentiment, pred_svm))
my_features_own_review <- get_feature_vectors(tokens_own_review, corpus = corpus)
my_features_own_review <- add_targets(my_features_own_review, own_review[,])
my_features_own_review$sentiment <- as.factor(my_features_own_review$sentiment)
pred_svm <- predict(m_svm, my_features_own_review)
pred_svm
own_review$sentiment
table(my_features_own_review$sentiment, pred_svm)
sensitivity(table(my_features_own_review$sentiment, pred_svm))
# First data set
# Read tsv files
imbd_review <- read.delim("data/labeledTrainData.tsv", sep = "\t", stringsAsFactors = FALSE)
# Fill the train dataset with 1000 observations from imdb dataset
train <- imbd_review[1:2000, c(2,3)]
#Second dataset
# Reading all of the positive reviews from multiple files
path <- "review_polarity/pos/"
polarity_review <- ""
file.names <- dir(path, pattern =".txt")
for(i in 1:length(file.names)){
file <- readtext(paste0(path, file.names[i]))
file$sentiment <- 1
polarity_review <- rbind(polarity_review, file)
}
# Removing first row due to readtext method
polarity_review <- polarity_review[-1,]
# Reading all of the negative reviews from multiple files
path <- "review_polarity/neg/"
file.names <- dir(path, pattern =".txt")
for(i in 1:length(file.names)){
file <- readtext(paste0(path, file.names[i]))
file$sentiment <- 0
polarity_review <- rbind(polarity_review, file)
}
# Change the column type of sentiment from chr to int
polarity_review$sentiment <- as.integer(polarity_review$sentiment)
row.names(polarity_review) <- NULL
# Change order and names of columns to the same as imbd_review
polarity_review <- polarity_review[, c(1,3,2)]
colnames(polarity_review) <- colnames(imbd_review)
# Shuffle all the polarity_reviews
polarity_review <- polarity_review[sample(nrow(polarity_review)),]
train <- rbind(train, polarity_review[1:1000, c(2,3)])
# Own data set
own_review <- read.delim("own_reviews.txt", sep = "\t", stringsAsFactors = FALSE)
# Create tokenized versions of the datasets
tokens <- tokenize(train[,2])
tokens_imdb <- tokenize(imbd_review[2000:3000, 3])
tokens_polarity <- tokenize(polarity_review[1000:2000,3])
tokens_own_review <- tokenize(own_review[,3])
# Remove unneeded variables
rm(file, i, file.names, path, file.names, size)
View(train)
corpus <- corpus_freq(tokens, corpus_size=3000)
my_features <- get_feature_vectors(tokens, corpus = corpus)
my_features <- add_targets(my_features, train)
my_features$sentiment <- as.factor(my_features$sentiment)
# Formula for each model
form <- as.formula(paste("sentiment~", paste(setdiff(names(my_features), c("sentiment")), collapse="+")))
# train the support vector machine with the train data
m_svm <- svm(form, data=my_features, type="C")
my_features_imdb <- get_feature_vectors(tokens_imdb, corpus = corpus)
my_features_imdb <- add_targets(my_features_imdb, imbd_review[2000:3000,])
my_features_imdb$sentiment <- as.factor(my_features_imdb$sentiment)
# Predict the sentiment of the reviews from first dataset
pred_svm <- predict(m_svm, my_features_imdb)
table(my_features_imdb$sentiment, pred_svm)
sensitivity(table(my_features_imdb$sentiment, pred_svm))
my_features_polarity <- get_feature_vectors(tokens_polarity, corpus = corpus)
my_features_polarity <- add_targets(my_features_polarity, polarity_review[1000:2000,])
my_features_polarity$sentiment <- as.factor(my_features_polarity$sentiment)
pred_svm <- predict(m_svm, my_features_polarity)
table(my_features_polarity$sentiment, pred_svm)
sensitivity(table(my_features_polarity$sentiment, pred_svm))
# Setup and predict own dataset
my_features_own_review <- get_feature_vectors(tokens_own_review, corpus = corpus)
my_features_own_review <- add_targets(my_features_own_review, own_review[,])
my_features_own_review$sentiment <- as.factor(my_features_own_review$sentiment)
pred_svm <- predict(m_svm, my_features_own_review)
pred_svm
own_review$sentiment
table(my_features_own_review$sentiment, pred_svm)
sensitivity(table(my_features_own_review$sentiment, pred_svm))
m_randomforest <- ranger(dependent.variable.name="sentiment", data=my_features, write.forest=TRUE)
pred_rf <- predict(m_randomforest, data=my_features_imdb)
pred_rf <- pred_rf$predictions
pred_rf <- predict(m_randomforest, data=my_features)
?ranger
m_randomforest <- ranger(sentiment~., data=my_features, write.forest=TRUE)
pred_rf <- predict(m_randomforest, data=my_features_imdb)
m_randomforest <- ranger(dependent.variable.names="sentiment", data=my_features, write.forest=TRUE)
m_randomforest <- ranger(dependent.variable.name="sentiment", data=my_features, write.forest=TRUE)
pred_rf <- predict(m_randomforest, data=my_features_imdb)
m_randomforest <- ranger(formula=form, data=my_features, write.forest=TRUE)
pred_rf <- predict(m_randomforest, data=my_features_imdb)
m_randomforest <- randomForest(sentiment ~ ., data = my_features, ntree = 500)
m_logit <- glm(form, data=my_features, family=binomial(link='logit'))
pred_log <- predict(m_logit, my_features_own_review, type="response")
pred_log <- ifelse(pred_log > .5,1,0)
pred_log
table(my_features_own_review$sentiment, pred_log)
sensitivity(table(my_features_own_review$sentiment, pred_log))
pred_log <- predict(m_logit, my_features_polarity, type="response")
pred_log <- ifelse(pred_log > .5,1,0)
table(my_features_polarity$sentiment, pred_log)
sensitivity(table(my_features_polarity$sentiment, pred_log))
table(my_features_polarity$sentiment, pred_log)
pred_log <- predict(m_logit, my_features_polarity, type="response")
pred_log <- ifelse(pred_log > .7,1,0)
table(my_features_polarity$sentiment, pred_log)
sensitivity(table(my_features_polarity$sentiment, pred_log))
pred_log <- predict(m_logit, my_features_polarity, type="response")
pred_log <- ifelse(pred_log > .9,1,0)
table(my_features_polarity$sentiment, pred_log)
pred_log <- predict(m_logit, my_features_polarity, type="response")
pred_log <- ifelse(pred_log > 1,1,0)
table(my_features_polarity$sentiment, pred_log)
pred_log <- predict(m_logit, my_features_polarity, type="response")
pred_log <- ifelse(pred_log > 0.1,1,0)
table(my_features_polarity$sentiment, pred_log)
rm(m_logit)
rm(m_randomforest)
rm(pred_log)
m_nbayes <- naiveBayes(form, data=my_features, laplace=1000, threshold=.5)
pred_nbayes <- predict(m_nbayes, my_features_own_review, threshold=.5, laplace=1000)
table(my_features_own_review$sentiment, pred_nbayes)
pred_nbayes <- predict(m_nbayes, my_features_polarity, threshold=.5, laplace=1000)
pred_nbayes <- predict(m_nbayes, my_features_polarity, threshold=.5, laplace=1000)
table(my_features_polarity$sentiment, pred_nbayes)
sensitivity(table(my_features_polarity$sentiment, pred_nbayes))
